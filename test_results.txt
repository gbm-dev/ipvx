bun test v1.1.27 (267afa29)

test/lib/bitwise/bitmask.test.ts:
(pass) Bitwise::Bitmask > Bitwise::Bitmask::generateBitmask > should generate correct bitmasks [0.07ms]
(pass) Bitwise::Bitmask > Bitwise::Bitmask::generateBitmask > should throw an error for invalid input [0.07ms]
(pass) Bitwise::Bitmask > Bitwise::Bitmask::applyMask > should correctly apply bitmasks [0.03ms]
(pass) Bitwise::Bitmask > Bitwise::Bitmask::invertMask > should correctly invert bitmasks [0.03ms]
45 |     });
46 |   });
47 | 
48 |   describe('Bitwise::Bitmask::extractBits', () => {
49 |     it('should correctly extract bits', () => {
50 |       expect(extractBits(0xC0A80105, 16, 23)).toBe(0x01);
                                                   ^
error: expect(received).toBe(expected)

Expected: 1
Received: 168

      at /home/snack/ipvx/test/lib/bitwise/bitmask.test.ts:50:47
(fail) Bitwise::Bitmask > Bitwise::Bitmask::extractBits > should correctly extract bits [0.20ms]
(pass) Bitwise::Bitmask > Bitwise::Bitmask::extractBits > should throw an error for invalid input [0.06ms]
(pass) Bitwise::Bitmask > Bitwise::Bitmask::isSubsetMask > should correctly identify subset masks [0.04ms]
67 | 
68 |   describe('Bitwise::Bitmask::countLeadingOnes', () => {
69 |     it('should correctly count leading ones', () => {
70 |       expect(countLeadingOnes(0xFFFF0000)).toBe(16);
71 |       expect(countLeadingOnes(0xFFF00000)).toBe(12);
72 |       expect(countLeadingOnes(0x00000000)).toBe(32);
                                                ^
error: expect(received).toBe(expected)

Expected: 32
Received: 0

      at /home/snack/ipvx/test/lib/bitwise/bitmask.test.ts:72:44
(fail) Bitwise::Bitmask > Bitwise::Bitmask::countLeadingOnes > should correctly count leading ones [0.11ms]
(pass) Bitwise::Bitmask > Bitwise::Bitmask::mergeBitmasks > should correctly merge bitmasks [0.03ms]
(pass) Bitwise::Bitmask > Bitwise::Bitmask::intersectBitmasks > should correctly intersect bitmasks [0.02ms]
(pass) Bitwise::Bitmask > Bitwise::Bitmask::isolateRightmostSetBit > should correctly isolate the rightmost set bit [0.03ms]
(pass) Bitwise::Bitmask > Bitwise::Bitmask::removeRightmostSetBit > should correctly remove the rightmost set bit [0.03ms]
(pass) Bitwise::Bitmask > Bitwise::Bitmask::nextLexicographicalMask > should correctly generate the next lexicographical mask [0.04ms]
(pass) Bitwise::Bitmask > Bitwise::Bitmask::getLowestNBits > should correctly generate masks with the lowest N bits set [0.04ms]
(pass) Bitwise::Bitmask > Bitwise::Bitmask::getLowestNBits > should throw an error for invalid input [0.05ms]
120 |     });
121 |   });
122 | 
123 |   describe('Bitwise::Bitmask::swapBits', () => {
124 |     it('should correctly swap bits', () => {
125 |       expect(swapBits(0b1010, 1, 3)).toBe(0b0110);
                                           ^
error: expect(received).toBe(expected)

Expected: 6
Received: 10

      at /home/snack/ipvx/test/lib/bitwise/bitmask.test.ts:125:38
(fail) Bitwise::Bitmask > Bitwise::Bitmask::swapBits > should correctly swap bits [0.09ms]
(pass) Bitwise::Bitmask > Bitwise::Bitmask::swapBits > should throw an error for invalid input [0.05ms]
(pass) Bitwise::Bitmask > Bitwise::Bitmask::modifyBitRange > should correctly modify a range of bits [0.05ms]
(pass) Bitwise::Bitmask > Bitwise::Bitmask::modifyBitRange > should throw an error for invalid input [0.08ms]
(pass) Bitwise::Bitmask > Edge Cases and Complex Scenarios > should handle 32-bit unsigned integer limits [0.03ms]
(pass) Bitwise::Bitmask > Edge Cases and Complex Scenarios > should handle operations on the highest bit [0.03ms]
(pass) Bitwise::Bitmask > Edge Cases and Complex Scenarios > should handle alternating bit patterns [0.02ms]
(pass) Bitwise::Bitmask > Chained Operations > should handle multiple operations correctly [0.03ms]
(pass) Bitwise::Bitmask > Boundary Value Analysis > should handle single bit flags at boundaries [0.03ms]
(pass) Bitwise::Bitmask > Performance Considerations > should handle operations on large sets efficiently [88.44ms]
(pass) Bitwise::Bitmask > Bitwise Operations Consistency > should maintain consistency across operations [0.10ms]
219 | 
220 |   describe('JavaScript-specific Integer Behavior', () => {
221 |     it('should handle negative integers correctly', () => {
222 |       expect(applyMask(-1, 0xFFFFFFFF)).toBe(0xFFFFFFFF);
223 |       expect(invertMask(-1)).toBe(0);
224 |       expect(extractBits(-1, 0, 31)).toBe(0xFFFFFFFF);
                                           ^
error: expect(received).toBe(expected)

Expected: 4294967295
Received: 0

      at /home/snack/ipvx/test/lib/bitwise/bitmask.test.ts:224:38
(fail) Bitwise::Bitmask > JavaScript-specific Integer Behavior > should handle negative integers correctly [0.13ms]
225 |     });
226 | 
227 |     it('should handle integers larger than 32 bits', () => {
228 |       const largeInt = 2 ** 53 - 1; // Max safe integer in JavaScript
229 |       expect(applyMask(largeInt, 0xFFFFFFFF)).toBe(0xFFFFFFFF);
230 |       expect(extractBits(largeInt, 0, 31)).toBe(0xFFFFFFFF);
                                                 ^
error: expect(received).toBe(expected)

Expected: 4294967295
Received: 0

      at /home/snack/ipvx/test/lib/bitwise/bitmask.test.ts:230:44
(fail) Bitwise::Bitmask > JavaScript-specific Integer Behavior > should handle integers larger than 32 bits [0.05ms]
(pass) Bitwise::Bitmask > JavaScript-specific Integer Behavior > should handle floating-point numbers [0.02ms]
(pass) Bitwise::Bitmask > JavaScript-specific Integer Behavior > should handle NaN and Infinity [0.06ms]
242 |   });
243 | 
244 |   describe('Overflow and Underflow Scenarios', () => {
245 |     it('should handle overflow in bitmask operations', () => {
246 |       expect(mergeBitmasks(0xFFFFFFFF, 1)).toBe(0xFFFFFFFF);
247 |       expect(nextLexicographicalMask(0xFFFFFFFF)).toBe(0);
                                                        ^
error: expect(received).toBe(expected)

Expected: 0
Received: 4294967295

      at /home/snack/ipvx/test/lib/bitwise/bitmask.test.ts:247:51
(fail) Bitwise::Bitmask > Overflow and Underflow Scenarios > should handle overflow in bitmask operations [0.10ms]
(pass) Bitwise::Bitmask > Overflow and Underflow Scenarios > should handle underflow in bitmask operations [0.03ms]
(pass) Bitwise::Bitmask > Edge Cases for Specific Functions > should handle edge cases for generateBitmask [0.09ms]
260 |       expect(() => generateBitmask(33)).toThrow();
261 |       expect(() => generateBitmask(-1)).toThrow();
262 |     });
263 | 
264 |     it('should handle edge cases for extractBits', () => {
265 |       expect(extractBits(0xFFFFFFFF, 0, 31)).toBe(0xFFFFFFFF);
                                                   ^
error: expect(received).toBe(expected)

Expected: 4294967295
Received: 0

      at /home/snack/ipvx/test/lib/bitwise/bitmask.test.ts:265:46
(fail) Bitwise::Bitmask > Edge Cases for Specific Functions > should handle edge cases for extractBits [0.07ms]
267 |       expect(() => extractBits(0, -1, 31)).toThrow();
268 |       expect(() => extractBits(0, 0, 32)).toThrow();
269 |     });
270 | 
271 |     it('should handle edge cases for countLeadingOnes', () => {
272 |       expect(countLeadingOnes(0)).toBe(32);
                                        ^
error: expect(received).toBe(expected)

Expected: 32
Received: 0

      at /home/snack/ipvx/test/lib/bitwise/bitmask.test.ts:272:35
(fail) Bitwise::Bitmask > Edge Cases for Specific Functions > should handle edge cases for countLeadingOnes [0.07ms]
273 |       expect(countLeadingOnes(0xFFFFFFFF)).toBe(0);
274 |       expect(countLeadingOnes(0x80000000)).toBe(1);
275 |     });
276 | 
277 |     it('should handle edge cases for nextLexicographicalMask', () => {
278 |       expect(nextLexicographicalMask(0)).toBe(0);
                                               ^
error: expect(received).toBe(expected)

Expected: 0
Received: 4294967295

      at /home/snack/ipvx/test/lib/bitwise/bitmask.test.ts:278:42
(fail) Bitwise::Bitmask > Edge Cases for Specific Functions > should handle edge cases for nextLexicographicalMask [0.04ms]
(pass) Bitwise::Bitmask > Bitwise Operations with Non-Integer Inputs > should handle string inputs by converting to numbers [0.02ms]
(pass) Bitwise::Bitmask > Bitwise Operations with Non-Integer Inputs > should handle boolean inputs [0.06ms]
(pass) Bitwise::Bitmask > Bitwise Operations with Non-Integer Inputs > should handle object inputs [0.07ms]
(pass) Bitwise::Bitmask > Consistency Across Operations > should maintain consistency when combining multiple operations [0.05ms]
315 |       for (let i = 0; i < 1000000; i++) {
316 |         result = applyMask(result, i);
317 |       }
318 |       const end = performance.now();
319 |       expect(end - start).toBeLessThan(1000); // Adjust threshold as needed
320 |       expect(result).toBe(999999);
                           ^
error: expect(received).toBe(expected)

Expected: 999999
Received: 0

      at /home/snack/ipvx/test/lib/bitwise/bitmask.test.ts:320:22
(fail) Bitwise::Bitmask > Performance for Large-Scale Operations > should handle a large number of operations efficiently [4.29ms]

10 tests failed:
(fail) Bitwise::Bitmask > Bitwise::Bitmask::extractBits > should correctly extract bits [0.20ms]
(fail) Bitwise::Bitmask > Bitwise::Bitmask::countLeadingOnes > should correctly count leading ones [0.11ms]
(fail) Bitwise::Bitmask > Bitwise::Bitmask::swapBits > should correctly swap bits [0.09ms]
(fail) Bitwise::Bitmask > JavaScript-specific Integer Behavior > should handle negative integers correctly [0.13ms]
(fail) Bitwise::Bitmask > JavaScript-specific Integer Behavior > should handle integers larger than 32 bits [0.05ms]
(fail) Bitwise::Bitmask > Overflow and Underflow Scenarios > should handle overflow in bitmask operations [0.10ms]
(fail) Bitwise::Bitmask > Edge Cases for Specific Functions > should handle edge cases for extractBits [0.07ms]
(fail) Bitwise::Bitmask > Edge Cases for Specific Functions > should handle edge cases for countLeadingOnes [0.07ms]
(fail) Bitwise::Bitmask > Edge Cases for Specific Functions > should handle edge cases for nextLexicographicalMask [0.04ms]
(fail) Bitwise::Bitmask > Performance for Large-Scale Operations > should handle a large number of operations efficiently [4.29ms]
---------------------------------|---------|---------|-------------------
File                             | % Funcs | % Lines | Uncovered Line #s
---------------------------------|---------|---------|-------------------
All files                        |  100.00 |  100.00 |
 src/ipv4/lib/bitwise/bitmask.ts |  100.00 |  100.00 | 
---------------------------------|---------|---------|-------------------

 31 pass
 10 fail
 88 expect() calls
Ran 41 tests across 1 files. [127.00ms]
